    #if defined(ESP32)
    #include <WiFi.h>
    #elif defined(ESP8266)
    #include <ESP8266WiFi.h>
    #endif
    #include <Firebase_ESP_Client.h>
    #include <addons/TokenHelper.h>
    #include <addons/RTDBHelper.h>
    #define WIFI_SSID "-----------------"
    #define WIFI_PASSWORD "------------------"
    #define API_KEY "--------------------------------------------"
    #define DATABASE_URL "---------------------------------------"
    #define USER_EMAIL "-----------------"
    #define USER_PASSWORD "---------"
    FirebaseData fbdo;
    FirebaseAuth auth;
    FirebaseConfig config;
/***********************************************************************/
    int count = 0 ;
    String msg;
/***********************************************************************/
    void Connect_WiFi();
    void Firebase_Store(String PATH,String MSG);
    String Firebase_getString(String PATH);
   
/***********************************************************************/
    void setup()
    {
         Connect_WiFi(); 
         pinMode(D0,OUTPUT);  // setting GND
         digitalWrite(D0,LOW);
         pinMode(D1,OUTPUT);
         pinMode(D2,OUTPUT);
         pinMode(D3,OUTPUT);
    }
/***********************************************************************/
    void loop()
    {
    
      if(Serial.available())
        {
          char x;
          x=Serial.read();
          if(x=='a')
          {
            Firebase_Store("/RGB/DATA","START");
          }
        }
          else if (Firebase_getString("/RGB/DATA"))
          {
            msg= Firebase_getString("/RGB/DATA");
              if(msg=="RED")
                {
                  digitalWrite(D2,HIGH);
                  digitalWrite(D1,LOW);
                  digitalWrite(D3,LOW);
                }
                else if(msg=="GREEN")
                {
                  digitalWrite(D1,HIGH);
                  digitalWrite(D2,LOW);
                  digitalWrite(D3,LOW);
                }
                else if(msg=="BLUE")
                {
                  digitalWrite(D3,HIGH);
                  digitalWrite(D1,LOW);
                  digitalWrite(D2,LOW);
                }
                else if(msg=="LOW")
                {
                  digitalWrite(D1,LOW);
                  digitalWrite(D2,LOW);
                  digitalWrite(D3,LOW);
                }
          }
       
   }
                         
    

  
/***********************************************************************/
    void Connect_WiFi()
    {
          Serial.begin(9600);
          delay(100); 
          WiFi.disconnect();
          delay(800); 
          Serial.println("Connecting to Wi-Fi"); 
          WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
          Serial.print("Connecting to Wi-Fi");
          delay(100);
          while (WiFi.status() != WL_CONNECTED)
          {
            Serial.print(".");
            delay(300);
          }
          Serial.println();
          Serial.print("Connected with IP: ");
          Serial.println(WiFi.localIP());
          Serial.println();
          Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);
          config.api_key = API_KEY;
          auth.user.email = USER_EMAIL;
          auth.user.password = USER_PASSWORD;
          config.database_url = DATABASE_URL;
          config.token_status_callback = tokenStatusCallback;
          #if defined(ESP8266)
            fbdo.setBSSLBufferSize(2048 /* Rx buffer size in bytes from 512 - 16384 */, 2048 /* Tx buffer size in bytes from 512 - 16384 */);
          #endif
          Firebase.begin(&config, &auth);
          Firebase.reconnectWiFi(true);
          Firebase.setDoubleDigits(5);
          config.timeout.serverResponse = 10 * 1000;
    }
/***********************************************************************/
    void Firebase_Store(String PATH,String MSG)
    {
          Serial.print("Uploading data \" ");
          Serial.print(MSG);
          Serial.print(" \"  to the location \" ");
          Serial.print(PATH);
          Serial.println(" \"");
          Firebase.RTDB.setString(&fbdo, PATH, MSG);
          delay(50);
    }
/***********************************************************************/
    String Firebase_getString(String PATH)
    {
      String msg = (Firebase.RTDB.getString(&fbdo, PATH) ? fbdo.to<const char *>() : fbdo.errorReason().c_str());
      delay(50);
      return msg;
    }
/***********************************************************************/
   
/***********************************************************************/
